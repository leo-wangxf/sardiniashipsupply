# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := glib
DEFS_Debug := \
	'-DNBLAS' \
	'-DNLAPACKE' \
	'-DNEIGEN' \
	'-DNINDEX_64' \
	'-DNINTEL' \
	'-DNODE_GYP_MODULE_NAME=glib' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-Wno-deprecated-declarations \
	-fopenmp \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=c++0x \
	-frtti \
	-fexceptions \
	-std=gnu++0x

INCS_Debug := \
	-I/home/clem/.node-gyp/6.9.1/include/node \
	-I/home/clem/.node-gyp/6.9.1/src \
	-I/home/clem/.node-gyp/6.9.1/deps/uv/include \
	-I/home/clem/.node-gyp/6.9.1/deps/v8/include \
	-I$(srcdir)/src/glib/base \
	-I$(srcdir)/src/glib/mine \
	-I$(srcdir)/src/glib/misc \
	-I$(srcdir)/src/glib/concurrent \
	-I$(srcdir)/src/third_party/sole \
	-I$(srcdir)/src/third_party/libsvm \
	-I$(srcdir)/src/third_party/eigen

DEFS_Release := \
	'-DNBLAS' \
	'-DNLAPACKE' \
	'-DNEIGEN' \
	'-DNINDEX_64' \
	'-DNINTEL' \
	'-DNODE_GYP_MODULE_NAME=glib' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DNDEBUG'

# Flags passed to all source files.
CFLAGS_Release := \
	-Wno-deprecated-declarations \
	-fopenmp \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-O3 \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=c++0x \
	-frtti \
	-fexceptions \
	-std=gnu++0x

INCS_Release := \
	-I/home/clem/.node-gyp/6.9.1/include/node \
	-I/home/clem/.node-gyp/6.9.1/src \
	-I/home/clem/.node-gyp/6.9.1/deps/uv/include \
	-I/home/clem/.node-gyp/6.9.1/deps/v8/include \
	-I$(srcdir)/src/glib/base \
	-I$(srcdir)/src/glib/mine \
	-I$(srcdir)/src/glib/misc \
	-I$(srcdir)/src/glib/concurrent \
	-I$(srcdir)/src/third_party/sole \
	-I$(srcdir)/src/third_party/libsvm \
	-I$(srcdir)/src/third_party/eigen

OBJS := \
	$(obj).target/$(TARGET)/src/glib/base/base.o \
	$(obj).target/$(TARGET)/src/glib/mine/mine.o \
	$(obj).target/$(TARGET)/src/glib/concurrent/thread.o \
	$(obj).target/$(TARGET)/src/third_party/sole/sole.o \
	$(obj).target/$(TARGET)/src/third_party/libsvm/svm.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/glib.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/glib.a: LIBS := $(LIBS)
$(obj).target/glib.a: TOOLSET := $(TOOLSET)
$(obj).target/glib.a: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,alink)

all_deps += $(obj).target/glib.a
# Add target alias
.PHONY: glib
glib: $(obj).target/glib.a

# Add target alias to "all" target.
.PHONY: all
all: glib

# Add target alias
.PHONY: glib
glib: $(builddir)/glib.a

# Copy this to the static library output path.
$(builddir)/glib.a: TOOLSET := $(TOOLSET)
$(builddir)/glib.a: $(obj).target/glib.a FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/glib.a
# Short alias for building this static library.
.PHONY: glib.a
glib.a: $(obj).target/glib.a $(builddir)/glib.a

# Add static library to "all" target.
.PHONY: all
all: $(builddir)/glib.a

